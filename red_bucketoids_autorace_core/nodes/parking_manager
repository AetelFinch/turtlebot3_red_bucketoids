#!/usr/bin/env python
# -*- coding: utf-8 -*-


import os

import numpy as np
import rospy, roslaunch

from enum import Enum
from std_msgs.msg import UInt8, Float64


class ParkingManager:
    def __init__(self):
        self.uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
        self.ros_package_path = os.path.dirname(os.path.realpath(__file__))
        self.ros_package_path = self.ros_package_path.replace('red_bucketoids_autorace_core/nodes', '')

        self.control_lane_is_move = rospy.Publisher('/control/lane/is_move', UInt8, queue_size=1)
        self.is_mission_over = rospy.Publisher('/mission/is_over', UInt8, queue_size=1)

        self.sub_is_parking = rospy.Subscriber('/detect/traffic_sign', UInt8, self.cbParking, queue_size=1)
        self.sub_parking_return = rospy.Subscriber('/detect/parking_stamped', UInt8, self.cbParkingExit, queue_size=1)

        rospy.loginfo("parking_manager - Start Parking Manager")
        self.initParking()


    def initParking(self):
        move_msg = UInt8()
        move_msg.data = 1
        self.control_lane_is_move.publish(move_msg)
        rospy.loginfo("parking_manager - Turn Up control_lane")

        roslaunch_file = self.ros_package_path + "red_bucketoids_autorace_detect/launch/detect_sign.launch"
        roslaunch_args = ["mission:=parking"]
        self.launch_parking_sign = roslaunch.parent.ROSLaunchParent(self.uuid, [(roslaunch_file, roslaunch_args)])
        self.launch_parking_sign.start()
        rospy.loginfo("parking_manager - Launch detect_parking_sign node")


    def cbParking(self, msg: UInt8):
        not_move_msg = UInt8()
        not_move_msg.data = 0
        self.control_lane_is_move.publish(not_move_msg)
        rospy.loginfo("parking_manager - Turn Off control_lane")

        self.launch_parking_sign.shutdown()
        rospy.loginfo("parking_manager - Shutdown detect_parking_sign node")

        self.launch_parking = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "red_bucketoids_autorace_detect/launch/detect_parking.launch"])
        self.launch_parking.start()
        rospy.loginfo("parking_manager - Launch detect_parking node")


    def cbParkingExit(self, msg: UInt8):
        self.launch_parking.shutdown()
        rospy.loginfo("parking_manager - Shutdown detect_parking node")

        rospy.sleep(0.1)
        move_msg = UInt8()
        move_msg.data = 1
        self.control_lane_is_move.publish(move_msg)
        rospy.loginfo("parking_manager -  Turn Up control_lane")

        rospy.loginfo("parking_manager - Send mission over message")
        mission_over = UInt8()
        mission_over.data = 1
        self.is_mission_over.publish(mission_over)


    def main(self):
        rospy.spin()


if __name__ == '__main__':
    rospy.init_node('parking_manager')
    node = ParkingManager()
    node.main()
