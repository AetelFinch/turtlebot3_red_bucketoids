#!/usr/bin/env python
# -*- coding: utf-8 -*-


import os

import numpy as np
import rospy, roslaunch

from enum import Enum
from std_msgs.msg import UInt8, Float64


class IntersectionManager:
    def __init__(self):
        self.uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
        self.ros_package_path = os.path.dirname(os.path.realpath(__file__))
        self.ros_package_path = self.ros_package_path.replace('red_bucketoids_autorace_core/nodes', '')

        self.control_lane_is_move = rospy.Publisher('/control/lane/is_move', UInt8, queue_size=1)
        self.is_mission_over = rospy.Publisher('/mission/is_over', UInt8, queue_size=1)

        self.sub_is_intersection = rospy.Subscriber('/detect/traffic_sign', UInt8, self.cbIntersection, queue_size=1)
        self.sub_intersection_returns = rospy.Subscriber('/detect/intersection_stamped', UInt8, self.cbIntersectionExit, queue_size=1)  

        self.type_of_sign = Enum('type_of_sign', 'intersection left right')
        self.is_intersection_node_start = False

        rospy.loginfo("intersection_manager - Start Intersection Manager")
        self.initIntersection()


    def initIntersection(self):
        move_msg = UInt8()
        move_msg.data = 1
        self.control_lane_is_move.publish(move_msg)
        rospy.loginfo("intersection_manager - Turn Up control_lane")

        roslaunch_file = self.ros_package_path + "red_bucketoids_autorace_detect/launch/detect_sign.launch"
        roslaunch_args = ["mission:=intersection"]
        self.launch_intersection_sign = roslaunch.parent.ROSLaunchParent(self.uuid, [(roslaunch_file, roslaunch_args)])
        self.launch_intersection_sign.start()
        rospy.loginfo("intersection_manager - Launch detect_intersection_sign node")


    def cbIntersection(self, msg: UInt8):
        if msg.data == self.type_of_sign.intersection.value and self.is_intersection_node_start == False:
            self.is_intersection_node_start = True
            self.launch_intersection = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "red_bucketoids_autorace_detect/launch/detect_intersection.launch"])
            self.launch_intersection.start()
            rospy.loginfo("intersection_manager - Launch detect_intersection node")


    def cbIntersectionExit(self, msg: UInt8):
        self.launch_intersection.shutdown()
        rospy.loginfo("intersection_manager - Shutdown detect_intersection node")

        self.launch_intersection_sign.shutdown()
        rospy.loginfo("intersection_manager - Shutdown detect_intersection_sign node")

        move_msg = UInt8()
        move_msg.data = 1
        self.control_lane_is_move.publish(move_msg)
        rospy.loginfo("intersection_manager -  Turn Up control_lane")

        mission_over = UInt8()
        mission_over.data = 1
        self.is_mission_over.publish(mission_over)
        rospy.loginfo("intersection_manager - Send mission over message")


    def main(self):
        rospy.spin()


if __name__ == '__main__':
    rospy.init_node('intersection_manager')
    node = IntersectionManager()
    node.main()

