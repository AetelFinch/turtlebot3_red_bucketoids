#!/usr/bin/env python
# -*- coding: utf-8 -*-


import rospy
import roslaunch
import math
import tf
from enum import Enum
from std_msgs.msg import UInt8
from geometry_msgs.msg import Twist, PoseStamped, PoseWithCovarianceStamped
from nav_msgs.msg import Odometry
from move_base_msgs.msg import MoveBaseActionResult
from red_bucketoids_autorace_msgs.msg import MovingParam


class DetectTunnel():
    def __init__(self):
        self.yellow_border_value = 0
        self.start_yellow_detect = False
        self.prev_yellow_value = 100
        # subscribes state 
        self.sub_moving_complete = rospy.Subscriber('/control/moving/complete', UInt8, self.cbMovingComplete, queue_size = 1)
        self.sub_arrival_status = rospy.Subscriber("/move_base/result", MoveBaseActionResult, self.cbGetNavigationResult, queue_size=1)
        self.sub_odom = rospy.Subscriber('/odom', Odometry, self.cbOdom, queue_size=1)
        self.sub_detect_yellow = rospy.Subscriber('/detect/yellow_line_reliability', UInt8, self.cbDetectYellow, queue_size=1)

        # publishes state
        self.pub_get_slam = rospy.Publisher('/control/slam/status', UInt8, queue_size=1)
        self.control_lane_is_move = rospy.Publisher('/control/lane/is_move', UInt8, queue_size=1)
        self.pub_tunnel_return = rospy.Publisher('/detect/tunnel_stamped', UInt8, queue_size=1)
        self.pub_moving_state = rospy.Publisher('/control/moving/state', MovingParam, queue_size= 1)
        self.pub_goal_pose_stamped = rospy.Publisher("/move_base_simple/goal", PoseStamped, queue_size=1)

        self.StepOfTunnel = Enum('StepOfTunnel', 'searching_tunnel_sign go_in_to_tunnel navigation go_out_from_tunnel exit')
        self.last_current_theta = 0.0

        self.type_of_state = Enum('type_of_state', 'idle start stop finish')
        self.type_of_moving = Enum('type_of_moving', 'idle left right forward backward')
        self.steps = [
            ("forward_while_yellow", 70),
            ("forward", 0.15),
            ("left", 45),
            ("forward", 0.15),
            ("right", 45),
            ("slam",),
            ("forward", 0.5),
            ("exit",)
        ]
        self.num_current_step = 0
        rospy.sleep(0.1)
        self.fnRunNextStep()

    def cbDetectYellow(self, msg):
        if self.start_yellow_detect:
            if msg.data <= self.yellow_border_value and self.prev_yellow_value > msg.data:  #Works only when yellow lane end but not begin
                self.start_yellow_detect = False
                rospy.loginfo("detect tunnel - End of yellow line")

                not_move = UInt8()
                not_move.data = 0
                self.control_lane_is_move.publish(not_move)
                rospy.loginfo("detect_tunnel - Turn Off control_lane")
                self.prev_yellow_value = msg.data
                self.fnRunNextStep()
                return
            else:
                rospy.loginfo(f"detect tunnel - See yellow line ({msg.data})")
        self.prev_yellow_value = msg.data

    def cbMovingComplete(self, msg: UInt8):
        rospy.loginfo(f"detect_tunnel - Complete {self.steps[self.num_current_step - 1]} moving")

        if msg.data == self.type_of_state.finish.value:
            self.fnRunNextStep()

    def fnRunNextStep(self):
        moving_msg = MovingParam()

        if self.steps[self.num_current_step][0] == "left":
            moving_msg.moving_type = self.type_of_moving.left.value
            moving_msg.moving_value_angular = self.steps[self.num_current_step][1]

        elif self.steps[self.num_current_step][0] == "right":
            moving_msg.moving_type = self.type_of_moving.right.value
            moving_msg.moving_value_angular = self.steps[self.num_current_step][1]

        elif self.steps[self.num_current_step][0] == "forward":
            moving_msg.moving_type = self.type_of_moving.forward.value
            moving_msg.moving_value_linear = self.steps[self.num_current_step][1]

        elif self.steps[self.num_current_step][0] == "forward_while_yellow":
            rospy.loginfo(f"detect_tunnel - Start {self.steps[self.num_current_step]} moving")
            self.yellow_border_value = self.steps[self.num_current_step][1]
            self.start_yellow_detect = True
            move_msg = UInt8()
            move_msg.data = 1
            self.control_lane_is_move.publish(move_msg)
            self.num_current_step += 1
            rospy.loginfo("detect_tunnel - Turn Up control_lane")
            return

        elif self.steps[self.num_current_step][0] == "slam":
            rospy.loginfo("detect_tunnel - Go through tunnel")
            begin_slam_msg = UInt8()
            begin_slam_msg.data = 1
            self.num_current_step += 1
            self.pub_get_slam.publish(begin_slam_msg)

            rospy.sleep(8)
            rospy.loginfo("detect_tunnel - Start moving through tunnel")
            self.fnPubGoalPose()
            return

        elif self.steps[self.num_current_step][0] == "exit":
            rospy.loginfo("detect_tunnel - Exit mission")
            finish_msg = UInt8()
            finish_msg.data = 1
            self.pub_tunnel_return.publish(finish_msg)
            return
  
        rospy.loginfo(f"detect_tunnel - Start {self.steps[self.num_current_step]} moving")
        self.num_current_step += 1
        self.pub_moving_state.publish(moving_msg)


    def cbGetNavigationResult(self, msg_nav_result):
        if msg_nav_result.status.status == 3:
            rospy.loginfo("detect_tunnel - Reached exit of tunnel")
            self.fnRunNextStep()


    def cbOdom(self, odom_msg):
        quaternion = (odom_msg.pose.pose.orientation.x, odom_msg.pose.pose.orientation.y, odom_msg.pose.pose.orientation.z, odom_msg.pose.pose.orientation.w)
        self.current_theta = self.euler_from_quaternion(quaternion)
        self.odom_msg = odom_msg
        if (self.current_theta - self.last_current_theta) < -math.pi:
            self.current_theta = 2. * math.pi + self.current_theta
            self.last_current_theta = math.pi
        elif (self.current_theta - self.last_current_theta) > math.pi:
            self.current_theta = -2. * math.pi + self.current_theta
            self.last_current_theta = -math.pi
        else:
            self.last_current_theta = self.current_theta

        self.current_pos_x = odom_msg.pose.pose.position.x
        self.current_pos_y = odom_msg.pose.pose.position.y


    def euler_from_quaternion(self, quaternion):
        theta = tf.transformations.euler_from_quaternion(quaternion)[2]
        return theta


    def fnPubGoalPose(self):
        goalPoseStamped = PoseStamped()

        goalPoseStamped.header.frame_id = "map"
        goalPoseStamped.header.stamp = rospy.Time.now()

        goalPoseStamped.pose.position.x = -0.26
        goalPoseStamped.pose.position.y = -1.78
        goalPoseStamped.pose.position.z = 0.0

        goalPoseStamped.pose.orientation.x = 0.0
        goalPoseStamped.pose.orientation.y = 0.0
        goalPoseStamped.pose.orientation.z = 0.0
        goalPoseStamped.pose.orientation.w = 1.0

        self.pub_goal_pose_stamped.publish(goalPoseStamped)


    def main(self):
        rospy.spin()


if __name__ == '__main__':
    rospy.init_node('detect_tunnel')
    node = DetectTunnel()
    node.main()
