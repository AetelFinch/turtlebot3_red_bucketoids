#!/usr/bin/env python
# -*- coding: utf-8 -*-


import rospy
import os
from enum import Enum
from std_msgs.msg import UInt8, Float64
from sensor_msgs.msg import LaserScan
from red_bucketoids_autorace_msgs.msg import MovingParam


class DetectParking:
    def __init__(self):
        self.start_obstacle_detection = False
        self.is_obstacle_detected_R = False
        self.is_obstacle_detected_L = False
        self.start_yellow_detect = False
        self.prev_yellow_value = 100
        self.yellow_border_value = 0

        self.sub_scan_obstacle = rospy.Subscriber('/scan', LaserScan, self.cbScanObstacle, queue_size=1)
        self.sub_moving_complete = rospy.Subscriber('/control/moving/complete', UInt8, self.cbMovingComplete, queue_size = 1)
        self.sub_detect_yellow = rospy.Subscriber('/detect/yellow_line_reliability', UInt8, self.cbDetectYellow, queue_size=1)
        
        self.control_lane_is_move = rospy.Publisher('/control/lane/is_move', UInt8, queue_size=1)
        self.pub_parking_return = rospy.Publisher('/detect/parking_stamped', UInt8, queue_size=1)
        self.pub_moving_state = rospy.Publisher('/control/moving/state', MovingParam, queue_size= 1)

        self.type_of_state = Enum('type_of_state', 'idle start stop finish')
        self.type_of_moving = Enum('type_of_moving', 'idle left right forward backward')
        self.steps = [
            ("forward_while_yellow", 0),
            ("forward", 0.1),
            ("left", 88),
            ("forward", 0.2),
            ("scan_obstacle_and_forward_while_yellow", 0),
            ("forward", 0.3),
            ("turn_correct", 90),
            ("forward", 0.2),
            ("backward", 0.2),
            ("turn_correct", 90),
            ("forward", 0.3),
            ("forward_while_yellow", 95),
            ("forward", 0.2),
            ("left", 70),
            ("exit",)
        ]
        self.num_current_step = 0
        rospy.sleep(0.1)
        self.fnRunNextStep()


    def cbScanObstacle(self, scan):
        if not self.start_obstacle_detection:
            return

        scan_start_left = 10
        scan_end_left = 100

        scan_start_right = 260
        scan_end_right = 350

        threshold_distance = 0.3

        for i in range(scan_start_left, scan_end_left):
            if scan.ranges[i] < threshold_distance and scan.ranges[i] > 0.01:
                self.is_obstacle_detected_L = True
                self.start_obstacle_detection = False
                rospy.loginfo("detect_parking - Detect left robot")
            
        for i in range(scan_start_right, scan_end_right):
            if scan.ranges[i] < threshold_distance and scan.ranges[i] > 0.01:
                self.is_obstacle_detected_R = True
                self.start_obstacle_detection = False
                rospy.loginfo("detect parking - Detect right robot")


    def cbDetectYellow(self, msg):
        if self.start_yellow_detect:
            if msg.data == self.yellow_border_value and self.prev_yellow_value > msg.data:  #Works only when yellow lane end but not begin
                self.start_yellow_detect = False
                rospy.loginfo("detect parking - End of yellow line")

                not_move = UInt8()
                not_move.data = 0
                self.control_lane_is_move.publish(not_move)
                rospy.loginfo("detect_parking - Turn Off control_lane")
                self.prev_yellow_value = msg.data
                self.fnRunNextStep()
                return
            else:
                rospy.loginfo(f"detect parking - See yellow line ({msg.data})")
        self.prev_yellow_value = msg.data


    def cbMovingComplete(self, msg: UInt8):
        rospy.loginfo(f"detect_parking - Complete {self.steps[self.num_current_step - 1]} moving")

        if msg.data == self.type_of_state.finish.value:
            self.fnRunNextStep()


    def fnRunNextStep(self):
        moving_msg = MovingParam()

        if self.steps[self.num_current_step][0] == "left":
            moving_msg.moving_type = self.type_of_moving.left.value
            moving_msg.moving_value_angular = self.steps[self.num_current_step][1]

        elif self.steps[self.num_current_step][0] == "right":
            moving_msg.moving_type = self.type_of_moving.right.value
            moving_msg.moving_value_angular = self.steps[self.num_current_step][1]

        elif self.steps[self.num_current_step][0] == "forward":
            moving_msg.moving_type = self.type_of_moving.forward.value
            moving_msg.moving_value_linear = self.steps[self.num_current_step][1]

        elif self.steps[self.num_current_step][0] == "backward":
            rospy.sleep(1)
            moving_msg.moving_type = self.type_of_moving.backward.value
            moving_msg.moving_value_linear = self.steps[self.num_current_step][1]

        elif self.steps[self.num_current_step][0] == "forward_while_yellow":
            rospy.loginfo(f"detect_parking - Start {self.steps[self.num_current_step]} moving")
            self.yellow_border_value = self.steps[self.num_current_step][1]
            self.start_yellow_detect = True
            move_msg = UInt8()
            move_msg.data = 1
            self.control_lane_is_move.publish(move_msg)
            self.num_current_step += 1
            rospy.loginfo("detect_parking - Turn Up control_lane")
            return

        elif self.steps[self.num_current_step][0] == "scan_obstacle_and_forward_while_yellow":
            self.yellow_border_value = self.steps[self.num_current_step][1]
            self.start_obstacle_detection = True
            rospy.loginfo(f"detect_parking - Start {self.steps[self.num_current_step]} moving")
            self.start_yellow_detect = True
            move_msg = UInt8()
            move_msg.data = 1
            self.control_lane_is_move.publish(move_msg)
            self.num_current_step += 1
            rospy.loginfo("detect_parking - Turn Up control_lane")
            return
            
        elif self.steps[self.num_current_step][0] == "turn_correct":
            if self.is_obstacle_detected_L:
                moving_msg.moving_type = self.type_of_moving.right.value
            elif self.is_obstacle_detected_R:
                moving_msg.moving_type = self.type_of_moving.left.value
            else:
                rospy.logerr("detect_parking - Not Detect robot on the parking")
                moving_msg.moving_type = self.type_of_moving.right.value
            moving_msg.moving_value_angular = self.steps[self.num_current_step][1]

        elif self.steps[self.num_current_step][0] == "exit":
            rospy.loginfo("detect_parking - Exit mission")
            finish_msg = UInt8()
            finish_msg.data = 1
            self.pub_parking_return.publish(finish_msg)
            return
  
        rospy.loginfo(f"detect_parking - Start {self.steps[self.num_current_step]} moving")
        self.num_current_step += 1
        self.pub_moving_state.publish(moving_msg)


    def main(self):
        rospy.spin()


if __name__ == '__main__':
    rospy.init_node('detect_parking')
    node = DetectParking()
    node.main()
