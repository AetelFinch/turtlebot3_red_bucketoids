#!/usr/bin/env python
# -*- coding: utf-8 -*-


import rospy
from enum import Enum
from std_msgs.msg import UInt8
from red_bucketoids_autorace_msgs.msg import MovingParam


class DetectIntersection():
    def __init__(self):
        self.is_left = False
        self.is_right = False

        self.start_yellow_detect_for_start = False
        self.start_white_detect_for_start = False
        self.start_yellow_detect = False
        self.start_white_detect = False

        self.yellow_border_value_for_start = None
        self.white_border_value_for_start = None
        self.yellow_border_value = None
        self.white_border_value = None

        self.prev_yellow_value = 0
        self.prev_white_value = 0

        self.sub_moving_complete = rospy.Subscriber('/control/moving/complete', UInt8, self.cbMovingComplete, queue_size=1)
        self.sub_is_intersection = rospy.Subscriber('/detect/traffic_sign', UInt8, self.cbDirection, queue_size=1)

        # self.sub_detect_yellow_start = rospy.Subscriber('/detect/yellow_line_reliability', UInt8, self.cbDetectYellowForStart, queue_size=1)
        self.sub_detect_white_start = rospy.Subscriber('/detect/white_line_reliability', UInt8, self.cbDetectWhiteForStart, queue_size=1)
        self.sub_detect_yellow = rospy.Subscriber('/detect/yellow_line_reliability', UInt8, self.cbDetectYellow, queue_size=1)
        self.sub_detect_white = rospy.Subscriber('/detect/white_line_reliability', UInt8, self.cbDetectWhite, queue_size=1)
   
        self.control_lane_is_move = rospy.Publisher('/control/lane/is_move', UInt8, queue_size=1)
        self.pub_moving_state = rospy.Publisher('/control/moving/state', MovingParam, queue_size = 1)
        self.pub_intersection_return = rospy.Publisher('/detect/intersection_stamped', UInt8, queue_size=1)

        self.type_of_sign = Enum('type_of_sign', 'intersection left right')
        self.type_of_state = Enum('type_of_state', 'idle start stop finish')
        self.type_of_moving = Enum('type_of_moving', 'idle left right forward')

        self.steps = [
            ("go_while_white", 95),
            ("left", 20),
            ("forward", 0.12),
            ("turn_correct", 90),
            ("forward", 0.1),
            # ("go_while_color", 95),
            # ("forward", 0.20),
            # ("turn_correct", 70),
            # ("forward", 0.10),
            ("exit",)
        ]
        self.num_current_step = 0
        rospy.sleep(0.1)
        self.fnRunNextStep()


    def cbDetectYellow(self, msg: UInt8):
        if self.start_yellow_detect:
            if msg.data == self.yellow_border_value and self.prev_yellow_value > msg.data:  #Works only when yellow lane end but not begin
                self.start_yellow_detect = False
                rospy.loginfo("detect_intersection - End of yellow line")

                not_move = UInt8()
                not_move.data = 0
                self.control_lane_is_move.publish(not_move)
                rospy.loginfo("detect_intersection - Turn Off control_lane")
                self.prev_yellow_value = msg.data
                self.fnRunNextStep()
                return
            else:
                rospy.loginfo(f"detect_intersection - See yellow line ({msg.data})")
        self.prev_yellow_value = msg.data


    # def cbDetectYellowForStart(self, msg: UInt8):
    #     if self.start_yellow_detect_for_start:
    #         if msg.data == self.yellow_border_value_for_start and self.prev_yellow_value > msg.data:  #Works only when yellow lane end but not begin
    #             self.start_yellow_detect_for_start = False
    #             rospy.loginfo("detect_intersection - End of yellow line")

    #             not_move = UInt8()
    #             not_move.data = 0
    #             self.control_lane_is_move.publish(not_move)
    #             rospy.loginfo("detect_intersection - Turn Off control_lane")
    #             self.fnRunNextStep()
    #             return
    #         else:
    #             rospy.loginfo(f"detect_intersection - See yellow line ({msg.data})")


    def cbDetectWhiteForStart(self, msg: UInt8):
        if self.start_white_detect_for_start:
            if msg.data == self.white_border_value_for_start and self.prev_white_value > msg.data:  #Works only when white lane end but not begin
                self.start_white_detect_for_start = False
                rospy.loginfo("detect_intersection - End of white line")

                not_move = UInt8()
                not_move.data = 0
                self.control_lane_is_move.publish(not_move)
                rospy.loginfo("detect_intersection - Turn Off control_lane")
                self.fnRunNextStep()
                return
            else:
                rospy.loginfo(f"detect_intersection - See white line ({msg.data})")


    def cbDetectWhite(self, msg: UInt8):
        if self.start_white_detect:
            if msg.data == self.white_border_value and self.prev_white_value > msg.data:  #Works only when white lane end but not begin
                self.start_white_detect = False
                rospy.loginfo("detect_intersection - End of white line")

                not_move = UInt8()
                not_move.data = 0
                self.control_lane_is_move.publish(not_move)
                rospy.loginfo("detect_intersection - Turn Off control_lane")
                self.prev_white_value = msg.data
                self.fnRunNextStep()
                return
            else:
                rospy.loginfo(f"detect_intersection - See white line ({msg.data})")
        self.prev_white_value = msg.data


    def cbDirection(self, msg: UInt8):
        if msg.data == self.type_of_sign.intersection.value:
            return
        elif msg.data == self.type_of_sign.left.value:
            self.is_left = True
            
        elif msg.data == self.type_of_sign.right.value:
            self.is_right = True

        # not_move = UInt8()
        # not_move.data = 0
        # self.control_lane_is_move.publish(not_move)
        # rospy.loginfo("detect_intersection - Turn Off control_lane")

        # self.fnRunNextStep()


    def cbMovingComplete(self, msg: UInt8):
        rospy.loginfo(f"detect_intersection - Complete {self.steps[self.num_current_step - 1]} moving")

        if msg.data == self.type_of_state.finish.value:
            self.fnRunNextStep()


    def fnRunNextStep(self):
        moving_msg = MovingParam()

        if self.steps[self.num_current_step][0] == "left":
            moving_msg.moving_type = self.type_of_moving.left.value
            moving_msg.moving_value_angular = self.steps[self.num_current_step][1]

        elif self.steps[self.num_current_step][0] == "right":
            moving_msg.moving_type = self.type_of_moving.right.value
            moving_msg.moving_value_angular = self.steps[self.num_current_step][1]

        elif self.steps[self.num_current_step][0] == "forward":
            moving_msg.moving_type = self.type_of_moving.forward.value
            moving_msg.moving_value_linear = self.steps[self.num_current_step][1]

        elif self.steps[self.num_current_step][0] == "turn_correct":
            if self.is_right:
                moving_msg.moving_type = self.type_of_moving.right.value
            elif self.is_left:
                moving_msg.moving_type = self.type_of_moving.left.value
            else:
                rospy.logerr("detect_intersection - Not choose direction of rotation")
                moving_msg.moving_type = self.type_of_moving.left.value
            moving_msg.moving_value_angular = self.steps[self.num_current_step][1]

        # elif self.steps[self.num_current_step][0] == "go_while_not_choose_direction":
        #     rospy.loginfo(f"detect_intersection - Start {self.steps[self.num_current_step]} moving")
        #     move_msg = UInt8()
        #     move_msg.data = 1
        #     self.control_lane_is_move.publish(move_msg)
        #     self.num_current_step += 1
        #     rospy.loginfo("detect_intersection - Turn Up control_lane")
        #     return

        # elif self.steps[self.num_current_step][0] == "go_while_yellow":
        #     rospy.loginfo(f"detect_parking - Start {self.steps[self.num_current_step]} moving")
        #     self.yellow_border_value_for_start = self.steps[self.num_current_step][1]
        #     self.start_yellow_detect_for_start = True
        #     move_msg = UInt8()
        #     move_msg.data = 1
        #     self.control_lane_is_move.publish(move_msg)
        #     self.num_current_step += 1
        #     rospy.loginfo("detect_parking - Turn Up control_lane")
        #     return

        elif self.steps[self.num_current_step][0] == "go_while_white":
            rospy.loginfo(f"detect_parking - Start {self.steps[self.num_current_step]} moving")
            self.white_border_value_for_start = self.steps[self.num_current_step][1]
            self.start_white_detect_for_start = True
            move_msg = UInt8()
            move_msg.data = 1
            self.control_lane_is_move.publish(move_msg)
            self.num_current_step += 1
            rospy.loginfo("detect_parking - Turn Up control_lane")
            return

        elif self.steps[self.num_current_step][0] == "go_while_color":
            rospy.loginfo(f"detect_intersection - Start {self.steps[self.num_current_step]} moving")
            move_msg = UInt8()
            move_msg.data = 1
            self.control_lane_is_move.publish(move_msg)
            rospy.loginfo("detect_intersection - Turn Up control_lane")
            rospy.sleep(1)
            if self.is_right:
                self.white_border_value = self.steps[self.num_current_step][1]
                self.start_white_detect = True
            elif self.is_left:
                self.yellow_border_value = self.steps[self.num_current_step][1]
                self.start_yellow_detect = True
            self.num_current_step += 1
            return

        elif self.steps[self.num_current_step][0] == "exit":
            rospy.loginfo("detect_intersection - Exit mission")
            finish_msg = UInt8()
            finish_msg.data = 1
            self.pub_intersection_return.publish(finish_msg)
            return
  
        rospy.loginfo(f"detect_intersection - Start {self.steps[self.num_current_step]} moving")
        self.num_current_step += 1
        self.pub_moving_state.publish(moving_msg)


    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('detect_intersection')
    node = DetectIntersection()
    node.main()
