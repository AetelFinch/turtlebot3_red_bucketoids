#!/usr/bin/env python
# -*- coding: utf-8 -*-


import rospy
import os 
from enum import Enum
from std_msgs.msg import UInt8, Float64
from sensor_msgs.msg import LaserScan
from red_bucketoids_autorace_msgs.msg import MovingParam


class DetectContruction:
    def __init__(self):
        self.is_find_obstacle = False
        self.num_current_step = 0

        self.sub_scan_obstacle = rospy.Subscriber('/scan', LaserScan, self.cbFindObstacle, queue_size=1)
        self.sub_moving_complete = rospy.Subscriber('/control/moving/complete', UInt8, self.cbMovingComplete, queue_size=1)

        self.control_lane_is_move = rospy.Publisher('/control/lane/is_move', UInt8, queue_size=1)
        self.pub_moving_state = rospy.Publisher('/control/moving/state', MovingParam, queue_size = 1)
        self.pub_construction_steps = rospy.Publisher('/detect/construction_stamped', UInt8, queue_size=1)

        self.type_of_state = Enum('type_of_state', 'idle start stop finish')
        self.type_of_moving = Enum('type_of_moving', 'idle left right forward')
        self.steps = [
            ("left", 90),
            ("forward", 0.22),
            ("right", 90),
            ("forward_to_obstacle",),
            ("right", 90),
            ("forward", 0.23),
            ("left", 90),
            ("exit",)
        ]


    def cbFindObstacle(self, scan):
        if self.is_find_obstacle:
            return

        angle_scan = 2
        scan_start = 0
        scan_end = 0 + angle_scan
        threshold_distance = 0.2
        is_obstacle_detected = False

        for i in range(scan_start, scan_end):
            if scan.ranges[i] < threshold_distance and scan.ranges[i] > 0.01:
                is_obstacle_detected = True
                rospy.loginfo("detect_contruction - Detect obstacle")

                not_move = UInt8()
                not_move.data = 0
                self.control_lane_is_move.publish(not_move)
                rospy.loginfo("detect_contruction - Turn Off control_lane")

                self.is_find_obstacle = True
                self.fnRunNextStep()
                break


    def cbMovingComplete(self, msg: UInt8):
        rospy.loginfo(f"detect_contruction - Complete {self.steps[self.num_current_step - 1]} moving")

        if msg.data == self.type_of_state.finish.value:
            self.fnRunNextStep()
        

    def fnRunNextStep(self):
        moving_msg = MovingParam()

        if self.steps[self.num_current_step][0] == "left":
            moving_msg.moving_type = self.type_of_moving.left.value
            moving_msg.moving_value_angular = self.steps[self.num_current_step][1]

        elif self.steps[self.num_current_step][0] == "right":
            moving_msg.moving_type = self.type_of_moving.right.value
            moving_msg.moving_value_angular = self.steps[self.num_current_step][1]

        elif self.steps[self.num_current_step][0] == "forward":
            moving_msg.moving_type = self.type_of_moving.forward.value
            moving_msg.moving_value_linear = self.steps[self.num_current_step][1]

        elif self.steps[self.num_current_step][0] == "forward_to_obstacle":
            self.is_find_obstacle = False
            move = UInt8()
            move.data = 1
            self.control_lane_is_move.publish(move)
            self.num_current_step += 1
            rospy.loginfo("detect_contruction - Turn Up control_lane")
            return


        elif self.steps[self.num_current_step][0] == "exit":
            rospy.loginfo("detect_contruction - Exit mission")
            finish_msg = UInt8()
            finish_msg.data = 1
            self.pub_construction_steps.publish(finish_msg)
            return
  
        rospy.loginfo(f"detect_contruction - Start {self.steps[self.num_current_step]} moving")
        self.num_current_step += 1
        self.pub_moving_state.publish(moving_msg)


    def main(self):
        rospy.spin()


if __name__ == '__main__':
    rospy.init_node('detect_contruction')
    node = DetectContruction()
    node.main()
